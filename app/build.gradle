
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
if (enable_plugin_kotlin) {
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'

}

rootProject.ext.version_minSdk = 19

android {
    buildToolsVersion rootProject.ext.version_buildTools
    compileSdkVersion rootProject.ext.version_compileSdk

    defaultConfig {
        minSdkVersion rootProject.ext.version_minSdk
        targetSdkVersion rootProject.ext.version_compileSdk
        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"
        buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", "${findUsedAndroidLocales()}"
        buildConfigField "String", "GITHASH", "\"${getGitHash()}\""

        resValue "string", "manifest_package_id", "io.github.mania.memetastic"
        applicationId "io.github.mania.memetastic"
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        setProperty("archivesBaseName", applicationId + "-v" + versionCode + "-" + versionName)
    }

    flavorDimensions "default"
    productFlavors {
        flavorDefault {
        }
        flavorGplay {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }
        flavorAtest {
            applicationId "logic.mania.memetastic_test"
            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = new Date().format('yyMMdd')
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
        }
    }

    sourceSets {
        main { assets.srcDirs = ['src/main/assets'] }

        if (enable_plugin_kotlin) {
            main.java.srcDirs += 'src/main/kotlin'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == 'com.android.support') {
                    if (details.requested.name != 'multidex' && details.requested.name != 'multidex-instrumentation') {
                        details.useVersion "${rootProject.ext.version_library_appcompat}"
                    }
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE-LGPL-2.1.txt'
        exclude 'META-INF/LICENSE-LGPL-3.txt'
        exclude 'META-INF/LICENSE-W3C-TEST'
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

dependencies {
    // Testing
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.assertj:assertj-core:3.13.1'

    // Android standard libs
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    // UI libraries
    implementation 'com.jaredrummler:colorpicker:1.0.2'

    //firebase
    implementation 'com.google.firebase:firebase-messaging:20.2.4'
    implementation 'com.google.firebase:firebase-analytics:17.4.4'
  // implementation 'com.google.firebase:firebase-crashlytics-ndk:17.1.1'
    // Add the Firebase Crashlytics SDK.
  //  implementation 'com.google.firebase:firebase-crashlytics:17.1.1'

    //ads
    implementation 'com.google.android.gms:play-services-ads:19.3.0'

    implementation 'com.android.support:multidex:1.0.3'



// Tool libraries
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    if (enable_plugin_kotlin) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version_plugin_kotlin}"
    }

    // Processors
    def anpros = ["com.jakewharton:butterknife-compiler:${version_library_butterknife}"]
    for (anpro in anpros) {
        if (enable_plugin_kotlin) {
            kapt anpro
        } else {
            annotationProcessor anpro
        }
    }
}
